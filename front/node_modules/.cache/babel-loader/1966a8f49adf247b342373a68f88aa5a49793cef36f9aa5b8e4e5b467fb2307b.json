{"ast":null,"code":"var _jsxFileName = \"/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/Spotify.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [topSongs, setTopSongs] = useState([]);\n  const [darkMode, setDarkMode] = useState(() => {\n    // Check if mode exists in local storage, otherwise default to light mode\n    const mode = localStorage.getItem('darkMode');\n    return mode ? JSON.parse(mode) : false;\n  });\n  useEffect(() => {\n    fetchTopSongs();\n  }, []);\n  useEffect(() => {\n    // Store the mode in local storage whenever it changes\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\n  }, [darkMode]);\n  const fetchTopSongs = async () => {\n    try {\n      // Make a request to fetch the top 10 songs from Spotify (replace with your own API call)\n      const response = await fetch('YOUR_SPOTIFY_API_ENDPOINT');\n      const data = await response.json();\n      setTopSongs(data.topSongs);\n    } catch (error) {\n      console.error('Error fetching top songs:', error);\n    }\n  };\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${darkMode ? 'dark' : 'light'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Top 10 Songs on Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleDarkMode,\n        children: darkMode ? 'Light Mode' : 'Dark Mode'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: topSongs.map((song, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [index + 1, \". \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [song.name, \" by \", song.artist]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dhsGXjeoSrHPtPa3ISpr+2ddqtg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","topSongs","setTopSongs","darkMode","setDarkMode","mode","localStorage","getItem","JSON","parse","fetchTopSongs","setItem","stringify","response","fetch","data","json","error","console","toggleDarkMode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","song","index","name","artist","_c","$RefreshReg$"],"sources":["/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/Spotify.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [topSongs, setTopSongs] = useState([]);\n  const [darkMode, setDarkMode] = useState(() => {\n    // Check if mode exists in local storage, otherwise default to light mode\n    const mode = localStorage.getItem('darkMode');\n    return mode ? JSON.parse(mode) : false;\n  });\n\n  useEffect(() => {\n    fetchTopSongs();\n  }, []);\n\n  useEffect(() => {\n    // Store the mode in local storage whenever it changes\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\n  }, [darkMode]);\n\n  const fetchTopSongs = async () => {\n    try {\n      // Make a request to fetch the top 10 songs from Spotify (replace with your own API call)\n      const response = await fetch('YOUR_SPOTIFY_API_ENDPOINT');\n      const data = await response.json();\n      setTopSongs(data.topSongs);\n    } catch (error) {\n      console.error('Error fetching top songs:', error);\n    }\n  };\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <div className={`App ${darkMode ? 'dark' : 'light'}`}>\n      <header>\n        <h1>Top 10 Songs on Spotify</h1>\n        <button onClick={toggleDarkMode}>{darkMode ? 'Light Mode' : 'Dark Mode'}</button>\n      </header>\n      <main>\n        <ul>\n          {topSongs.map((song, index) => (\n            <li key={index}>\n              <span>{index + 1}. </span>\n              <span>{song.name} by {song.artist}</span>\n            </li>\n          ))}\n        </ul>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}