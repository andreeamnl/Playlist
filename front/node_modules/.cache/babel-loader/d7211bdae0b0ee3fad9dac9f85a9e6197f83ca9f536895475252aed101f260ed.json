{"ast":null,"code":"var _jsxFileName = \"/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LikedIcon from '../Like/LikedIcon.jsx';\nimport UnlikedIcon from '../Like/UnlikedIcon.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Like = ({\n  songId\n}) => {\n  _s();\n  const [liked, setLiked] = useState(false);\n  useEffect(() => {\n    const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n    const song = playlist[songId]; // Access song object using songId as key\n\n    if (song && song.liked) {\n      setLiked(true);\n    }\n  }, [songId]);\n  const toggleLiked = async () => {\n    // Toggle liked state in the component\n    setLiked(prevLiked => !prevLiked);\n    try {\n      // Update liked status in local storage\n      const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n      const songIndex = playlist.findIndex(song => song.id === songId);\n      if (songIndex !== -1) {\n        // Create a copy of the song object\n        const updatedSong = {\n          ...playlist[songIndex]\n        };\n\n        // Toggle the liked property of the copied song object\n        updatedSong.liked = !updatedSong.liked;\n\n        // Replace the original song object with the updated one in the playlist array\n        playlist[songIndex] = updatedSong;\n\n        // Update the playlist in local storage\n        await localStorage.setItem('playlist', JSON.stringify(playlist));\n      }\n    } catch (error) {\n      console.error('Error updating playlist in local storage:', error);\n      // Handle potential errors during localStorage update (optional)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: toggleLiked,\n    children: liked ? /*#__PURE__*/_jsxDEV(LikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(UnlikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n_s(Like, \"XVwEQrglgvKg4vWDDJzGSUieNRY=\");\n_c = Like;\nexport default Like;\nvar _c;\n$RefreshReg$(_c, \"Like\");","map":{"version":3,"names":["React","useState","useEffect","LikedIcon","UnlikedIcon","jsxDEV","_jsxDEV","Like","songId","_s","liked","setLiked","playlist","JSON","parse","localStorage","getItem","song","toggleLiked","prevLiked","songIndex","findIndex","id","updatedSong","setItem","stringify","error","console","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LikedIcon from '../Like/LikedIcon.jsx';\nimport UnlikedIcon from '../Like/UnlikedIcon.jsx';\n\nconst Like = ({ songId }) => {\n    const [liked, setLiked] = useState(false);\n  \n    useEffect(() => {\n        const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n        const song = playlist[songId]; // Access song object using songId as key\n      \n        if (song && song.liked) {\n          setLiked(true);\n        }\n    }, [songId]);\n      \n  \n    const toggleLiked = async () => {\n      // Toggle liked state in the component\n      setLiked(prevLiked => !prevLiked);\n  \n      try {\n        // Update liked status in local storage\n        const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n  \n        const songIndex = playlist.findIndex(song => song.id === songId);\n  \n        if (songIndex !== -1) {\n          // Create a copy of the song object\n          const updatedSong = { ...playlist[songIndex] };\n  \n          // Toggle the liked property of the copied song object\n          updatedSong.liked = !updatedSong.liked;\n  \n          // Replace the original song object with the updated one in the playlist array\n          playlist[songIndex] = updatedSong;\n  \n          // Update the playlist in local storage\n          await localStorage.setItem('playlist', JSON.stringify(playlist));\n        }\n      } catch (error) {\n        console.error('Error updating playlist in local storage:', error);\n        // Handle potential errors during localStorage update (optional)\n      }\n    };\n  \n    return (\n      <div onClick={toggleLiked}>\n        {liked ? <LikedIcon /> : <UnlikedIcon />}\n      </div>\n    );\n};\n\nexport default Like;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzCC,SAAS,CAAC,MAAM;IACZ,MAAMU,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;IACnE,MAAMC,IAAI,GAAGL,QAAQ,CAACJ,MAAM,CAAC,CAAC,CAAC;;IAE/B,IAAIS,IAAI,IAAIA,IAAI,CAACP,KAAK,EAAE;MACtBC,QAAQ,CAAC,IAAI,CAAC;IAChB;EACJ,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAGZ,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B;IACAP,QAAQ,CAACQ,SAAS,IAAI,CAACA,SAAS,CAAC;IAEjC,IAAI;MACF;MACA,MAAMP,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MAEnE,MAAMI,SAAS,GAAGR,QAAQ,CAACS,SAAS,CAACJ,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAKd,MAAM,CAAC;MAEhE,IAAIY,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB;QACA,MAAMG,WAAW,GAAG;UAAE,GAAGX,QAAQ,CAACQ,SAAS;QAAE,CAAC;;QAE9C;QACAG,WAAW,CAACb,KAAK,GAAG,CAACa,WAAW,CAACb,KAAK;;QAEtC;QACAE,QAAQ,CAACQ,SAAS,CAAC,GAAGG,WAAW;;QAEjC;QACA,MAAMR,YAAY,CAACS,OAAO,CAAC,UAAU,EAAEX,IAAI,CAACY,SAAS,CAACb,QAAQ,CAAC,CAAC;MAClE;IACF,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE;IACF;EACF,CAAC;EAED,oBACEpB,OAAA;IAAKsB,OAAO,EAAEV,WAAY;IAAAW,QAAA,EACvBnB,KAAK,gBAAGJ,OAAA,CAACH,SAAS;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAG3B,OAAA,CAACF,WAAW;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEZ,CAAC;AAACxB,EAAA,CA/CIF,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AAiDV,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}