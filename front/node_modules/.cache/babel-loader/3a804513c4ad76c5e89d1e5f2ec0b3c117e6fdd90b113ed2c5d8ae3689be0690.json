{"ast":null,"code":"var _jsxFileName = \"/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LikedIcon from '../Like/LikedIcon.jsx';\nimport UnlikedIcon from '../Like/UnlikedIcon.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Like = ({\n  songId\n}) => {\n  _s();\n  const [liked, setLiked] = useState(false);\n  useEffect(() => {\n    const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n    const song = playlist[songId]; // Access song object using songId as key\n    if (song && song.liked) {\n      setLiked(true);\n    }\n  }, [songId]);\n  const toggleLiked = async () => {\n    // Update liked state in the component (immediate update)\n    setLiked(prevLiked => !prevLiked);\n    try {\n      // Update liked status in local storage\n      const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n      console.log(playlist);\n      const song = playlist[songId]; // Access song object using songId as key\n      console.log(song);\n      if (song) {\n        song.liked = true; // Set liked property to true for the song object\n        await localStorage.setItem('playlist', JSON.stringify(playlist));\n      }\n    } catch (error) {\n      console.error('Error updating playlist in local storage:', error);\n      // Handle potential errors during localStorage update (optional)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: toggleLiked,\n    children: liked ? /*#__PURE__*/_jsxDEV(LikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(UnlikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Like, \"XVwEQrglgvKg4vWDDJzGSUieNRY=\");\n_c = Like;\nexport default Like;\nvar _c;\n$RefreshReg$(_c, \"Like\");","map":{"version":3,"names":["React","useState","useEffect","LikedIcon","UnlikedIcon","jsxDEV","_jsxDEV","Like","songId","_s","liked","setLiked","playlist","JSON","parse","localStorage","getItem","song","toggleLiked","prevLiked","console","log","setItem","stringify","error","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport LikedIcon from '../Like/LikedIcon.jsx';\nimport UnlikedIcon from '../Like/UnlikedIcon.jsx';\n\nconst Like = ({ songId }) => {\n  const [liked, setLiked] = useState(false);\n\n  useEffect(() => {\n    const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n    const song = playlist[songId]; // Access song object using songId as key\n    if (song && song.liked) {\n      setLiked(true);\n    }\n  }, [songId]);\n\n  const toggleLiked = async () => {\n    // Update liked state in the component (immediate update)\n    setLiked(prevLiked => !prevLiked);\n\n    try {\n      // Update liked status in local storage\n      const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n      console.log(playlist);\n\n      const song = playlist[songId]; // Access song object using songId as key\n      console.log(song);\n      if (song) {\n        song.liked = true; // Set liked property to true for the song object\n        await localStorage.setItem('playlist', JSON.stringify(playlist));\n      }\n    } catch (error) {\n      console.error('Error updating playlist in local storage:', error);\n      // Handle potential errors during localStorage update (optional)\n    }\n  };\n\n  return (\n    <div onClick={toggleLiked}>\n      {liked ? <LikedIcon /> : <UnlikedIcon />}\n    </div>\n  );\n};\n\nexport default Like;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEzCC,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;IACnE,MAAMC,IAAI,GAAGL,QAAQ,CAACJ,MAAM,CAAC,CAAC,CAAC;IAC/B,IAAIS,IAAI,IAAIA,IAAI,CAACP,KAAK,EAAE;MACtBC,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B;IACAP,QAAQ,CAACQ,SAAS,IAAI,CAACA,SAAS,CAAC;IAEjC,IAAI;MACF;MACA,MAAMP,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MACnEI,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;MAErB,MAAMK,IAAI,GAAGL,QAAQ,CAACJ,MAAM,CAAC,CAAC,CAAC;MAC/BY,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MACjB,IAAIA,IAAI,EAAE;QACRA,IAAI,CAACP,KAAK,GAAG,IAAI,CAAC,CAAC;QACnB,MAAMK,YAAY,CAACO,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACX,QAAQ,CAAC,CAAC;MAClE;IACF,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdJ,OAAO,CAACI,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE;IACF;EACF,CAAC;EAED,oBACElB,OAAA;IAAKmB,OAAO,EAAEP,WAAY;IAAAQ,QAAA,EACvBhB,KAAK,gBAAGJ,OAAA,CAACH,SAAS;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGxB,OAAA,CAACF,WAAW;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAACrB,EAAA,CArCIF,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAuCV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}