{"ast":null,"code":"var _jsxFileName = \"/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport LikedIcon from '../Like/LikedIcon.jsx';\nimport UnlikedIcon from '../Like/UnlikedIcon.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Like = ({\n  songId,\n  onHandleLike\n}) => {\n  _s();\n  const [liked, setLiked] = useState(false);\n  const playlist = JSON.parse(localStorage.getItem('playlist')) || [];\n  const handleLike = () => {\n    const song = playlist.find(song => song.id === songId);\n    console.log(song);\n    if (song && song.liked) {\n      setLiked(true);\n    } else {\n      // If the song is not liked, toggle its liked status\n      song.liked = !song.liked;\n      const index = playlist.findIndex(song => song.id === songId);\n\n      // If the song with the given ID exists in the playlist\n      if (index !== -1) {\n        // Replace the song in the playlist with the updated one\n        playlist[index] = song;\n      }\n\n      // Update the playlist in local storage\n      localStorage.setItem('playlist', JSON.stringify(playlist));\n    }\n  };\n  const toggleLiked = () => {\n    setLiked(prevLiked => !prevLiked);\n    handleLike();\n    onHandleLike(playlist);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: toggleLiked,\n    children: liked ? /*#__PURE__*/_jsxDEV(LikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this) : /*#__PURE__*/_jsxDEV(UnlikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 32\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Like, \"5oFMLl0KA2P+7Df5hTCAaQ+yYE8=\");\n_c = Like;\nexport default Like;\nvar _c;\n$RefreshReg$(_c, \"Like\");","map":{"version":3,"names":["React","useState","LikedIcon","UnlikedIcon","jsxDEV","_jsxDEV","Like","songId","onHandleLike","_s","liked","setLiked","playlist","JSON","parse","localStorage","getItem","handleLike","song","find","id","console","log","index","findIndex","setItem","stringify","toggleLiked","prevLiked","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js"],"sourcesContent":["import React, { useState } from 'react';\nimport LikedIcon from '../Like/LikedIcon.jsx';\nimport UnlikedIcon from '../Like/UnlikedIcon.jsx';\n\nconst Like = ({ songId, onHandleLike }) => {\n  const [liked, setLiked] = useState(false);\n  const playlist = JSON.parse(localStorage.getItem('playlist')) || [];\n\n  const handleLike = () => {\n    const song = playlist.find(song => song.id === songId);\n    console.log(song);\n    \n    if (song && song.liked) {\n      setLiked(true);\n    } else {\n      // If the song is not liked, toggle its liked status\n      song.liked = !song.liked;\n      const index = playlist.findIndex(song => song.id === songId);\n\n      // If the song with the given ID exists in the playlist\n      if (index !== -1) {\n        // Replace the song in the playlist with the updated one\n        playlist[index] = song;\n      }\n\n      // Update the playlist in local storage\n      localStorage.setItem('playlist', JSON.stringify(playlist));\n    }\n  }\n\n  const toggleLiked = () => {\n    setLiked(prevLiked => !prevLiked);\n    handleLike();\n    onHandleLike(playlist);\n  };\n\n  return (\n    <div onClick={toggleLiked}>\n      {liked ? <LikedIcon /> : <UnlikedIcon />}\n    </div>\n  );\n};\n\nexport default Like;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,WAAW,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,IAAI,GAAGA,CAAC;EAAEC,MAAM;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAMW,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;EAEnE,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,IAAI,GAAGN,QAAQ,CAACO,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACE,EAAE,KAAKb,MAAM,CAAC;IACtDc,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IAEjB,IAAIA,IAAI,IAAIA,IAAI,CAACR,KAAK,EAAE;MACtBC,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,MAAM;MACL;MACAO,IAAI,CAACR,KAAK,GAAG,CAACQ,IAAI,CAACR,KAAK;MACxB,MAAMa,KAAK,GAAGX,QAAQ,CAACY,SAAS,CAACN,IAAI,IAAIA,IAAI,CAACE,EAAE,KAAKb,MAAM,CAAC;;MAE5D;MACA,IAAIgB,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB;QACAX,QAAQ,CAACW,KAAK,CAAC,GAAGL,IAAI;MACxB;;MAEA;MACAH,YAAY,CAACU,OAAO,CAAC,UAAU,EAAEZ,IAAI,CAACa,SAAS,CAACd,QAAQ,CAAC,CAAC;IAC5D;EACF,CAAC;EAED,MAAMe,WAAW,GAAGA,CAAA,KAAM;IACxBhB,QAAQ,CAACiB,SAAS,IAAI,CAACA,SAAS,CAAC;IACjCX,UAAU,CAAC,CAAC;IACZT,YAAY,CAACI,QAAQ,CAAC;EACxB,CAAC;EAED,oBACEP,OAAA;IAAKwB,OAAO,EAAEF,WAAY;IAAAG,QAAA,EACvBpB,KAAK,gBAAGL,OAAA,CAACH,SAAS;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAG7B,OAAA,CAACF,WAAW;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAACzB,EAAA,CArCIH,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AAuCV,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}