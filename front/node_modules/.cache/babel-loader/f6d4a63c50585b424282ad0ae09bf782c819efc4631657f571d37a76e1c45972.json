{"ast":null,"code":"var _jsxFileName = \"/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Like = ({\n  songId\n}) => {\n  _s();\n  const [liked, setLiked] = useState(false);\n  useEffect(() => {\n    const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n    console.log('Playlist:', playlist);\n    const song = playlist[songId]; // Access song object using songId as key\n    console.log('Song:', song);\n    if (song && song.liked) {\n      setLiked(true);\n    }\n  }, [songId]);\n  const toggleLiked = async () => {\n    // Update liked state in the component (immediate update)\n    setLiked(prevLiked => !prevLiked);\n    try {\n      // Update liked status in local storage\n      const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n      console.log('Playlist:', playlist);\n      console.log('Song ID:', songId);\n      const songIndex = playlist.findIndex(song => song.id === songId);\n      console.log('Song Index:', songIndex);\n      if (songIndex !== -1) {\n        // Create a copy of the song object\n        const updatedSong = {\n          ...playlist[songIndex]\n        };\n\n        // Update the liked property of the copied song object\n        updatedSong.liked = true;\n\n        // Replace the original song object with the updated one in the playlist array\n        playlist[songIndex] = updatedSong;\n\n        // Update the playlist in local storage\n        await localStorage.setItem('playlist', JSON.stringify(playlist));\n      }\n    } catch (error) {\n      console.error('Error updating playlist in local storage:', error);\n      // Handle potential errors during localStorage update (optional)\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: toggleLiked,\n    children: liked ? /*#__PURE__*/_jsxDEV(LikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(UnlikedIcon, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 34\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n};\n_s(Like, \"XVwEQrglgvKg4vWDDJzGSUieNRY=\");\n_c = Like;\nvar _c;\n$RefreshReg$(_c, \"Like\");","map":{"version":3,"names":["Like","songId","_s","liked","setLiked","useState","useEffect","playlist","JSON","parse","localStorage","getItem","console","log","song","toggleLiked","prevLiked","songIndex","findIndex","id","updatedSong","setItem","stringify","error","_jsxDEV","onClick","children","LikedIcon","fileName","_jsxFileName","lineNumber","columnNumber","UnlikedIcon","_c","$RefreshReg$"],"sources":["/Applications/GitHub/SpotifyAPITest/spotify-top-songs/src/components/Like/Like.js"],"sourcesContent":["const Like = ({ songId }) => {\n    const [liked, setLiked] = useState(false);\n  \n    useEffect(() => {\n      const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n      console.log('Playlist:', playlist);\n      \n      const song = playlist[songId]; // Access song object using songId as key\n      console.log('Song:', song);\n  \n      if (song && song.liked) {\n        setLiked(true);\n      }\n    }, [songId]);\n  \n    const toggleLiked = async () => {\n      // Update liked state in the component (immediate update)\n      setLiked(prevLiked => !prevLiked);\n  \n      try {\n        // Update liked status in local storage\n        const playlist = JSON.parse(localStorage.getItem('playlist')) || {};\n        console.log('Playlist:', playlist);\n        console.log('Song ID:', songId);\n  \n        const songIndex = playlist.findIndex(song => song.id === songId);\n        console.log('Song Index:', songIndex);\n  \n        if (songIndex !== -1) {\n          // Create a copy of the song object\n          const updatedSong = { ...playlist[songIndex] };\n  \n          // Update the liked property of the copied song object\n          updatedSong.liked = true;\n  \n          // Replace the original song object with the updated one in the playlist array\n          playlist[songIndex] = updatedSong;\n  \n          // Update the playlist in local storage\n          await localStorage.setItem('playlist', JSON.stringify(playlist));\n        }\n      } catch (error) {\n        console.error('Error updating playlist in local storage:', error);\n        // Handle potential errors during localStorage update (optional)\n      }\n    };\n  \n    return (\n      <div onClick={toggleLiked}>\n        {liked ? <LikedIcon /> : <UnlikedIcon />}\n      </div>\n    );\n  };\n  "],"mappings":";;;AAAA,MAAMA,IAAI,GAAGA,CAAC;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;EAEzCC,SAAS,CAAC,MAAM;IACd,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;IACnEC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEN,QAAQ,CAAC;IAElC,MAAMO,IAAI,GAAGP,QAAQ,CAACN,MAAM,CAAC,CAAC,CAAC;IAC/BW,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,IAAI,CAAC;IAE1B,IAAIA,IAAI,IAAIA,IAAI,CAACX,KAAK,EAAE;MACtBC,QAAQ,CAAC,IAAI,CAAC;IAChB;EACF,CAAC,EAAE,CAACH,MAAM,CAAC,CAAC;EAEZ,MAAMc,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B;IACAX,QAAQ,CAACY,SAAS,IAAI,CAACA,SAAS,CAAC;IAEjC,IAAI;MACF;MACA,MAAMT,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;MACnEC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEN,QAAQ,CAAC;MAClCK,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEZ,MAAM,CAAC;MAE/B,MAAMgB,SAAS,GAAGV,QAAQ,CAACW,SAAS,CAACJ,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAKlB,MAAM,CAAC;MAChEW,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,SAAS,CAAC;MAErC,IAAIA,SAAS,KAAK,CAAC,CAAC,EAAE;QACpB;QACA,MAAMG,WAAW,GAAG;UAAE,GAAGb,QAAQ,CAACU,SAAS;QAAE,CAAC;;QAE9C;QACAG,WAAW,CAACjB,KAAK,GAAG,IAAI;;QAExB;QACAI,QAAQ,CAACU,SAAS,CAAC,GAAGG,WAAW;;QAEjC;QACA,MAAMV,YAAY,CAACW,OAAO,CAAC,UAAU,EAAEb,IAAI,CAACc,SAAS,CAACf,QAAQ,CAAC,CAAC;MAClE;IACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE;IACF;EACF,CAAC;EAED,oBACEC,OAAA;IAAKC,OAAO,EAAEV,WAAY;IAAAW,QAAA,EACvBvB,KAAK,gBAAGqB,OAAA,CAACG,SAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGP,OAAA,CAACQ,WAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CApDEF,IAAI;AAAAiC,EAAA,GAAJjC,IAAI;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}